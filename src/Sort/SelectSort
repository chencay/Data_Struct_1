import java.util.Arrays;

//选择排序
/*
 * 基本思想： 
 *      在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数值与第一个元素交换； 
 *      第二次遍历n-2个数，找到最小的数值与第二个元素交换； 
 *     ... 
 *      第n-1次遍历，找到最小的数值与第n-1个元素交换，排序完成 
 *   
 * 思路： 
 *      两层循环 
 *      第一个层循环遍历数组，第二层循环找到剩余元素中最小值的索引，内层循环结束，交换数据。 
 *      内层循环每结束一次，排好一位数据。两层循环结束，数据排好有序。 
 *     
 * 与冒泡排序的区别：
 *      冒泡排序算法：每次比较如果发现较小的元素在后面，就交换两个相邻的元素。
 *      选择排序算法：先并不急于调换位置，先从A[0]开始逐个检查，看哪个数最小就记下该数所在的位置P，等一次扫描完毕，
 * 再把A[n]和A[0]对调.
                 所以，选择排序每扫描一遍数组，只需要一次真正的交换，而冒泡可能需要很多次。比较的次数是一样的。
 */  
public class SelectSort {
	private void selectsort(int[] a){
		for(int i=0;i<a.length;i++){
			int minIndex=i;          //初始化最小值所在的索引下标
			for(int j=minIndex+1;j<a.length;j++){
				if(a[j]<a[minIndex]){
					minIndex=j;//寻找剩余元素中最小值的索引
				}
			}
			//将最小的元素交换到循环的初始位置
			if(minIndex!=i){
				int tmp=a[minIndex];
				a[minIndex]=a[i];
				a[i]=tmp;
			}
		}
		
	}
	public static void main(String[] args) {
		SelectSort ss=new SelectSort();
		int a[] = { 22, 18, 36, 93, 6, 17, 9, 69, 38 };  
        ss.selectsort(a);  
        System.out.println(Arrays.toString(a));  
	}

}
